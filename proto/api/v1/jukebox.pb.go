// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: api/v1/jukebox.proto

package v1

import (
	_ "github.com/johanbrandhorst/grpc-gateway-boilerplate/proto/api/v1/tagger"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Format int32

const (
	Format_FORMAT_UNSET Format = 0
	Format_JUKEBOX_S16  Format = 1
)

// Enum value maps for Format.
var (
	Format_name = map[int32]string{
		0: "FORMAT_UNSET",
		1: "JUKEBOX_S16",
	}
	Format_value = map[string]int32{
		"FORMAT_UNSET": 0,
		"JUKEBOX_S16":  1,
	}
)

func (x Format) Enum() *Format {
	p := new(Format)
	*p = x
	return p
}

func (x Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Format) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_jukebox_proto_enumTypes[0].Descriptor()
}

func (Format) Type() protoreflect.EnumType {
	return &file_api_v1_jukebox_proto_enumTypes[0]
}

func (x Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Format.Descriptor instead.
func (Format) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{0}
}

type Album struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Artist *Artist `protobuf:"bytes,3,opt,name=artist,proto3" json:"artist,omitempty"`
	Tracks []*Song `protobuf:"bytes,4,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *Album) Reset() {
	*x = Album{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Album) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Album) ProtoMessage() {}

func (x *Album) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Album.ProtoReflect.Descriptor instead.
func (*Album) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{0}
}

func (x *Album) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Album) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Album) GetArtist() *Artist {
	if x != nil {
		return x.Artist
	}
	return nil
}

func (x *Album) GetTracks() []*Song {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type AlbumCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Album *Album `protobuf:"bytes,1,opt,name=album,proto3" json:"album,omitempty"`
}

func (x *AlbumCreateRequest) Reset() {
	*x = AlbumCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumCreateRequest) ProtoMessage() {}

func (x *AlbumCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumCreateRequest.ProtoReflect.Descriptor instead.
func (*AlbumCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{1}
}

func (x *AlbumCreateRequest) GetAlbum() *Album {
	if x != nil {
		return x.Album
	}
	return nil
}

type AlbumUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Album *Album `protobuf:"bytes,1,opt,name=album,proto3" json:"album,omitempty"`
}

func (x *AlbumUpdateRequest) Reset() {
	*x = AlbumUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumUpdateRequest) ProtoMessage() {}

func (x *AlbumUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumUpdateRequest.ProtoReflect.Descriptor instead.
func (*AlbumUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{2}
}

func (x *AlbumUpdateRequest) GetAlbum() *Album {
	if x != nil {
		return x.Album
	}
	return nil
}

type AlbumQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ArtistId   string `protobuf:"bytes,3,opt,name=artistId,proto3" json:"artistId,omitempty"`
	ArtistName string `protobuf:"bytes,4,opt,name=artistName,proto3" json:"artistName,omitempty"`
	SongId     string `protobuf:"bytes,5,opt,name=songId,proto3" json:"songId,omitempty"`
	SongName   string `protobuf:"bytes,6,opt,name=songName,proto3" json:"songName,omitempty"`
}

func (x *AlbumQuery) Reset() {
	*x = AlbumQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumQuery) ProtoMessage() {}

func (x *AlbumQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumQuery.ProtoReflect.Descriptor instead.
func (*AlbumQuery) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{3}
}

func (x *AlbumQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AlbumQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AlbumQuery) GetArtistId() string {
	if x != nil {
		return x.ArtistId
	}
	return ""
}

func (x *AlbumQuery) GetArtistName() string {
	if x != nil {
		return x.ArtistName
	}
	return ""
}

func (x *AlbumQuery) GetSongId() string {
	if x != nil {
		return x.SongId
	}
	return ""
}

func (x *AlbumQuery) GetSongName() string {
	if x != nil {
		return x.SongName
	}
	return ""
}

type AlbumList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Album `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AlbumList) Reset() {
	*x = AlbumList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumList) ProtoMessage() {}

func (x *AlbumList) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumList.ProtoReflect.Descriptor instead.
func (*AlbumList) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{4}
}

func (x *AlbumList) GetItems() []*Album {
	if x != nil {
		return x.Items
	}
	return nil
}

type Artist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Albums []*Album `protobuf:"bytes,3,rep,name=albums,proto3" json:"albums,omitempty"`
	Songs  []*Song  `protobuf:"bytes,4,rep,name=songs,proto3" json:"songs,omitempty"`
}

func (x *Artist) Reset() {
	*x = Artist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artist) ProtoMessage() {}

func (x *Artist) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artist.ProtoReflect.Descriptor instead.
func (*Artist) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{5}
}

func (x *Artist) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Artist) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Artist) GetAlbums() []*Album {
	if x != nil {
		return x.Albums
	}
	return nil
}

func (x *Artist) GetSongs() []*Song {
	if x != nil {
		return x.Songs
	}
	return nil
}

type ArtistCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artist *Artist `protobuf:"bytes,1,opt,name=artist,proto3" json:"artist,omitempty"`
}

func (x *ArtistCreateRequest) Reset() {
	*x = ArtistCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistCreateRequest) ProtoMessage() {}

func (x *ArtistCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistCreateRequest.ProtoReflect.Descriptor instead.
func (*ArtistCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{6}
}

func (x *ArtistCreateRequest) GetArtist() *Artist {
	if x != nil {
		return x.Artist
	}
	return nil
}

type ArtistUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artist *Artist `protobuf:"bytes,1,opt,name=artist,proto3" json:"artist,omitempty"`
}

func (x *ArtistUpdateRequest) Reset() {
	*x = ArtistUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistUpdateRequest) ProtoMessage() {}

func (x *ArtistUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistUpdateRequest.ProtoReflect.Descriptor instead.
func (*ArtistUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{7}
}

func (x *ArtistUpdateRequest) GetArtist() *Artist {
	if x != nil {
		return x.Artist
	}
	return nil
}

type ArtistList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Artist `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ArtistList) Reset() {
	*x = ArtistList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistList) ProtoMessage() {}

func (x *ArtistList) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistList.ProtoReflect.Descriptor instead.
func (*ArtistList) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{8}
}

func (x *ArtistList) GetItems() []*Artist {
	if x != nil {
		return x.Items
	}
	return nil
}

type ArtistQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AlbumId  string `protobuf:"bytes,3,opt,name=albumId,proto3" json:"albumId,omitempty"`
	ArtistId string `protobuf:"bytes,4,opt,name=artistId,proto3" json:"artistId,omitempty"`
	SongId   string `protobuf:"bytes,5,opt,name=songId,proto3" json:"songId,omitempty"`
	SongName string `protobuf:"bytes,6,opt,name=songName,proto3" json:"songName,omitempty"`
}

func (x *ArtistQuery) Reset() {
	*x = ArtistQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistQuery) ProtoMessage() {}

func (x *ArtistQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistQuery.ProtoReflect.Descriptor instead.
func (*ArtistQuery) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{9}
}

func (x *ArtistQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ArtistQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ArtistQuery) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

func (x *ArtistQuery) GetArtistId() string {
	if x != nil {
		return x.ArtistId
	}
	return ""
}

func (x *ArtistQuery) GetSongId() string {
	if x != nil {
		return x.SongId
	}
	return ""
}

func (x *ArtistQuery) GetSongName() string {
	if x != nil {
		return x.SongName
	}
	return ""
}

type PlaylistQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PlaylistQuery) Reset() {
	*x = PlaylistQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistQuery) ProtoMessage() {}

func (x *PlaylistQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistQuery.ProtoReflect.Descriptor instead.
func (*PlaylistQuery) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{10}
}

func (x *PlaylistQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlaylistQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PlaylistCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlist *Playlist `protobuf:"bytes,100,opt,name=playlist,proto3" json:"playlist,omitempty"`
}

func (x *PlaylistCreateRequest) Reset() {
	*x = PlaylistCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistCreateRequest) ProtoMessage() {}

func (x *PlaylistCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistCreateRequest.ProtoReflect.Descriptor instead.
func (*PlaylistCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{11}
}

func (x *PlaylistCreateRequest) GetPlaylist() *Playlist {
	if x != nil {
		return x.Playlist
	}
	return nil
}

type PlaylistList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Playlist `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PlaylistList) Reset() {
	*x = PlaylistList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistList) ProtoMessage() {}

func (x *PlaylistList) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistList.ProtoReflect.Descriptor instead.
func (*PlaylistList) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{12}
}

func (x *PlaylistList) GetItems() []*Playlist {
	if x != nil {
		return x.Items
	}
	return nil
}

type PlaylistUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlist *Playlist `protobuf:"bytes,100,opt,name=playlist,proto3" json:"playlist,omitempty"`
}

func (x *PlaylistUpdateRequest) Reset() {
	*x = PlaylistUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistUpdateRequest) ProtoMessage() {}

func (x *PlaylistUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistUpdateRequest.ProtoReflect.Descriptor instead.
func (*PlaylistUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{13}
}

func (x *PlaylistUpdateRequest) GetPlaylist() *Playlist {
	if x != nil {
		return x.Playlist
	}
	return nil
}

type Playlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Songs []*Song `protobuf:"bytes,100,rep,name=songs,proto3" json:"songs,omitempty"`
}

func (x *Playlist) Reset() {
	*x = Playlist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Playlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Playlist) ProtoMessage() {}

func (x *Playlist) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Playlist.ProtoReflect.Descriptor instead.
func (*Playlist) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{14}
}

func (x *Playlist) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Playlist) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Playlist) GetSongs() []*Song {
	if x != nil {
		return x.Songs
	}
	return nil
}

type PlaySongChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk     []byte                 `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Size      int32                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *PlaySongChunk) Reset() {
	*x = PlaySongChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaySongChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaySongChunk) ProtoMessage() {}

func (x *PlaySongChunk) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaySongChunk.ProtoReflect.Descriptor instead.
func (*PlaySongChunk) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{15}
}

func (x *PlaySongChunk) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *PlaySongChunk) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PlaySongChunk) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type PlaySongChunkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlaySongChunkResponse) Reset() {
	*x = PlaySongChunkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaySongChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaySongChunkResponse) ProtoMessage() {}

func (x *PlaySongChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaySongChunkResponse.ProtoReflect.Descriptor instead.
func (*PlaySongChunkResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{16}
}

type PlaySongHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Song       *Song  `protobuf:"bytes,1,opt,name=song,proto3" json:"song,omitempty"`
	Format     Format `protobuf:"varint,2,opt,name=format,proto3,enum=jukebox.Format" json:"format,omitempty"`
	SampleRate int32  `protobuf:"varint,3,opt,name=sampleRate,proto3" json:"sampleRate,omitempty"`
	Channels   uint32 `protobuf:"varint,4,opt,name=channels,proto3" json:"channels,omitempty"`
	Samples    uint32 `protobuf:"varint,5,opt,name=samples,proto3" json:"samples,omitempty"`
}

func (x *PlaySongHeader) Reset() {
	*x = PlaySongHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaySongHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaySongHeader) ProtoMessage() {}

func (x *PlaySongHeader) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaySongHeader.ProtoReflect.Descriptor instead.
func (*PlaySongHeader) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{17}
}

func (x *PlaySongHeader) GetSong() *Song {
	if x != nil {
		return x.Song
	}
	return nil
}

func (x *PlaySongHeader) GetFormat() Format {
	if x != nil {
		return x.Format
	}
	return Format_FORMAT_UNSET
}

func (x *PlaySongHeader) GetSampleRate() int32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *PlaySongHeader) GetChannels() uint32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *PlaySongHeader) GetSamples() uint32 {
	if x != nil {
		return x.Samples
	}
	return 0
}

type PlaySongHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlaySongHeaderResponse) Reset() {
	*x = PlaySongHeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaySongHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaySongHeaderResponse) ProtoMessage() {}

func (x *PlaySongHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaySongHeaderResponse.ProtoReflect.Descriptor instead.
func (*PlaySongHeaderResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{18}
}

type PlaySongTrailer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlaySongTrailer) Reset() {
	*x = PlaySongTrailer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaySongTrailer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaySongTrailer) ProtoMessage() {}

func (x *PlaySongTrailer) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaySongTrailer.ProtoReflect.Descriptor instead.
func (*PlaySongTrailer) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{19}
}

type PlaySongTrailerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlaySongTrailerResponse) Reset() {
	*x = PlaySongTrailerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaySongTrailerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaySongTrailerResponse) ProtoMessage() {}

func (x *PlaySongTrailerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaySongTrailerResponse.ProtoReflect.Descriptor instead.
func (*PlaySongTrailerResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{20}
}

type Receiver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Receiver) Reset() {
	*x = Receiver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Receiver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receiver) ProtoMessage() {}

func (x *Receiver) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receiver.ProtoReflect.Descriptor instead.
func (*Receiver) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{21}
}

func (x *Receiver) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Receiver) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Receiver) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ReceiverCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//
	//	*ReceiverCommandRequest_PlaySongHeader
	//	*ReceiverCommandRequest_PlaySongChunk
	//	*ReceiverCommandRequest_PlaySongTrailer
	Command isReceiverCommandRequest_Command `protobuf_oneof:"command"`
}

func (x *ReceiverCommandRequest) Reset() {
	*x = ReceiverCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiverCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiverCommandRequest) ProtoMessage() {}

func (x *ReceiverCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiverCommandRequest.ProtoReflect.Descriptor instead.
func (*ReceiverCommandRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{22}
}

func (m *ReceiverCommandRequest) GetCommand() isReceiverCommandRequest_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *ReceiverCommandRequest) GetPlaySongHeader() *PlaySongHeader {
	if x, ok := x.GetCommand().(*ReceiverCommandRequest_PlaySongHeader); ok {
		return x.PlaySongHeader
	}
	return nil
}

func (x *ReceiverCommandRequest) GetPlaySongChunk() *PlaySongChunk {
	if x, ok := x.GetCommand().(*ReceiverCommandRequest_PlaySongChunk); ok {
		return x.PlaySongChunk
	}
	return nil
}

func (x *ReceiverCommandRequest) GetPlaySongTrailer() *PlaySongTrailer {
	if x, ok := x.GetCommand().(*ReceiverCommandRequest_PlaySongTrailer); ok {
		return x.PlaySongTrailer
	}
	return nil
}

type isReceiverCommandRequest_Command interface {
	isReceiverCommandRequest_Command()
}

type ReceiverCommandRequest_PlaySongHeader struct {
	PlaySongHeader *PlaySongHeader `protobuf:"bytes,1,opt,name=playSongHeader,proto3,oneof"`
}

type ReceiverCommandRequest_PlaySongChunk struct {
	PlaySongChunk *PlaySongChunk `protobuf:"bytes,2,opt,name=playSongChunk,proto3,oneof"`
}

type ReceiverCommandRequest_PlaySongTrailer struct {
	PlaySongTrailer *PlaySongTrailer `protobuf:"bytes,3,opt,name=playSongTrailer,proto3,oneof"`
}

func (*ReceiverCommandRequest_PlaySongHeader) isReceiverCommandRequest_Command() {}

func (*ReceiverCommandRequest_PlaySongChunk) isReceiverCommandRequest_Command() {}

func (*ReceiverCommandRequest_PlaySongTrailer) isReceiverCommandRequest_Command() {}

type ReceiverCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ReceiverCommandResponse_PlaySongHeaderResponse
	//	*ReceiverCommandResponse_PlaySongChunkResponse
	//	*ReceiverCommandResponse_PlaySongTrailerResponse
	Response isReceiverCommandResponse_Response `protobuf_oneof:"response"`
}

func (x *ReceiverCommandResponse) Reset() {
	*x = ReceiverCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiverCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiverCommandResponse) ProtoMessage() {}

func (x *ReceiverCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiverCommandResponse.ProtoReflect.Descriptor instead.
func (*ReceiverCommandResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{23}
}

func (m *ReceiverCommandResponse) GetResponse() isReceiverCommandResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ReceiverCommandResponse) GetPlaySongHeaderResponse() *PlaySongHeaderResponse {
	if x, ok := x.GetResponse().(*ReceiverCommandResponse_PlaySongHeaderResponse); ok {
		return x.PlaySongHeaderResponse
	}
	return nil
}

func (x *ReceiverCommandResponse) GetPlaySongChunkResponse() *PlaySongChunkResponse {
	if x, ok := x.GetResponse().(*ReceiverCommandResponse_PlaySongChunkResponse); ok {
		return x.PlaySongChunkResponse
	}
	return nil
}

func (x *ReceiverCommandResponse) GetPlaySongTrailerResponse() *PlaySongTrailerResponse {
	if x, ok := x.GetResponse().(*ReceiverCommandResponse_PlaySongTrailerResponse); ok {
		return x.PlaySongTrailerResponse
	}
	return nil
}

type isReceiverCommandResponse_Response interface {
	isReceiverCommandResponse_Response()
}

type ReceiverCommandResponse_PlaySongHeaderResponse struct {
	PlaySongHeaderResponse *PlaySongHeaderResponse `protobuf:"bytes,1,opt,name=playSongHeaderResponse,proto3,oneof"`
}

type ReceiverCommandResponse_PlaySongChunkResponse struct {
	PlaySongChunkResponse *PlaySongChunkResponse `protobuf:"bytes,2,opt,name=playSongChunkResponse,proto3,oneof"`
}

type ReceiverCommandResponse_PlaySongTrailerResponse struct {
	PlaySongTrailerResponse *PlaySongTrailerResponse `protobuf:"bytes,3,opt,name=playSongTrailerResponse,proto3,oneof"`
}

func (*ReceiverCommandResponse_PlaySongHeaderResponse) isReceiverCommandResponse_Response() {}

func (*ReceiverCommandResponse_PlaySongChunkResponse) isReceiverCommandResponse_Response() {}

func (*ReceiverCommandResponse_PlaySongTrailerResponse) isReceiverCommandResponse_Response() {}

type ReceiverCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receiver *Receiver `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (x *ReceiverCreateRequest) Reset() {
	*x = ReceiverCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiverCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiverCreateRequest) ProtoMessage() {}

func (x *ReceiverCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiverCreateRequest.ProtoReflect.Descriptor instead.
func (*ReceiverCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{24}
}

func (x *ReceiverCreateRequest) GetReceiver() *Receiver {
	if x != nil {
		return x.Receiver
	}
	return nil
}

type ReceiverList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Receiver `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ReceiverList) Reset() {
	*x = ReceiverList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiverList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiverList) ProtoMessage() {}

func (x *ReceiverList) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiverList.ProtoReflect.Descriptor instead.
func (*ReceiverList) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{25}
}

func (x *ReceiverList) GetItems() []*Receiver {
	if x != nil {
		return x.Items
	}
	return nil
}

type ReceiverQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ReceiverQuery) Reset() {
	*x = ReceiverQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiverQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiverQuery) ProtoMessage() {}

func (x *ReceiverQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiverQuery.ProtoReflect.Descriptor instead.
func (*ReceiverQuery) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{26}
}

func (x *ReceiverQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReceiverQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReceiverQuery) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ReceiverUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receiver *Receiver `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (x *ReceiverUpdateRequest) Reset() {
	*x = ReceiverUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiverUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiverUpdateRequest) ProtoMessage() {}

func (x *ReceiverUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiverUpdateRequest.ProtoReflect.Descriptor instead.
func (*ReceiverUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{27}
}

func (x *ReceiverUpdateRequest) GetReceiver() *Receiver {
	if x != nil {
		return x.Receiver
	}
	return nil
}

type ReceiversPlayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Song *Song `protobuf:"bytes,100,opt,name=song,proto3" json:"song,omitempty"`
}

func (x *ReceiversPlayRequest) Reset() {
	*x = ReceiversPlayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiversPlayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiversPlayRequest) ProtoMessage() {}

func (x *ReceiversPlayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiversPlayRequest.ProtoReflect.Descriptor instead.
func (*ReceiversPlayRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{28}
}

func (x *ReceiversPlayRequest) GetSong() *Song {
	if x != nil {
		return x.Song
	}
	return nil
}

type ReceiversPlayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Song      *Song         `protobuf:"bytes,100,opt,name=song,proto3" json:"song,omitempty"`
	Receivers *ReceiverList `protobuf:"bytes,101,opt,name=receivers,proto3" json:"receivers,omitempty"`
}

func (x *ReceiversPlayResponse) Reset() {
	*x = ReceiversPlayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiversPlayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiversPlayResponse) ProtoMessage() {}

func (x *ReceiversPlayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiversPlayResponse.ProtoReflect.Descriptor instead.
func (*ReceiversPlayResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{29}
}

func (x *ReceiversPlayResponse) GetSong() *Song {
	if x != nil {
		return x.Song
	}
	return nil
}

func (x *ReceiversPlayResponse) GetReceivers() *ReceiverList {
	if x != nil {
		return x.Receivers
	}
	return nil
}

type ReceiversStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Song *Song `protobuf:"bytes,100,opt,name=song,proto3" json:"song,omitempty"`
}

func (x *ReceiversStopRequest) Reset() {
	*x = ReceiversStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiversStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiversStopRequest) ProtoMessage() {}

func (x *ReceiversStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiversStopRequest.ProtoReflect.Descriptor instead.
func (*ReceiversStopRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{30}
}

func (x *ReceiversStopRequest) GetSong() *Song {
	if x != nil {
		return x.Song
	}
	return nil
}

type ReceiversStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receivers *ReceiverList `protobuf:"bytes,100,opt,name=receivers,proto3" json:"receivers,omitempty"`
}

func (x *ReceiversStopResponse) Reset() {
	*x = ReceiversStopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiversStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiversStopResponse) ProtoMessage() {}

func (x *ReceiversStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiversStopResponse.ProtoReflect.Descriptor instead.
func (*ReceiversStopResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{31}
}

func (x *ReceiversStopResponse) GetReceivers() *ReceiverList {
	if x != nil {
		return x.Receivers
	}
	return nil
}

type SongList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Song `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SongList) Reset() {
	*x = SongList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SongList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SongList) ProtoMessage() {}

func (x *SongList) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SongList.ProtoReflect.Descriptor instead.
func (*SongList) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{32}
}

func (x *SongList) GetItems() []*Song {
	if x != nil {
		return x.Items
	}
	return nil
}

type SongQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ArtistId   string `protobuf:"bytes,2,opt,name=artistId,proto3" json:"artistId,omitempty"`
	AlbumId    string `protobuf:"bytes,3,opt,name=albumId,proto3" json:"albumId,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	ArtistName string `protobuf:"bytes,5,opt,name=artistName,proto3" json:"artistName,omitempty"`
	AlbumName  string `protobuf:"bytes,6,opt,name=albumName,proto3" json:"albumName,omitempty"`
}

func (x *SongQuery) Reset() {
	*x = SongQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SongQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SongQuery) ProtoMessage() {}

func (x *SongQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SongQuery.ProtoReflect.Descriptor instead.
func (*SongQuery) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{33}
}

func (x *SongQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SongQuery) GetArtistId() string {
	if x != nil {
		return x.ArtistId
	}
	return ""
}

func (x *SongQuery) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

func (x *SongQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SongQuery) GetArtistName() string {
	if x != nil {
		return x.ArtistName
	}
	return ""
}

func (x *SongQuery) GetAlbumName() string {
	if x != nil {
		return x.AlbumName
	}
	return ""
}

type SongCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Song *Song `protobuf:"bytes,100,opt,name=song,proto3" json:"song,omitempty"`
}

func (x *SongCreateRequest) Reset() {
	*x = SongCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SongCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SongCreateRequest) ProtoMessage() {}

func (x *SongCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SongCreateRequest.ProtoReflect.Descriptor instead.
func (*SongCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{34}
}

func (x *SongCreateRequest) GetSong() *Song {
	if x != nil {
		return x.Song
	}
	return nil
}

type SongUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Song *Song `protobuf:"bytes,100,opt,name=song,proto3" json:"song,omitempty"`
}

func (x *SongUpdateRequest) Reset() {
	*x = SongUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SongUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SongUpdateRequest) ProtoMessage() {}

func (x *SongUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SongUpdateRequest.ProtoReflect.Descriptor instead.
func (*SongUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{35}
}

func (x *SongUpdateRequest) GetSong() *Song {
	if x != nil {
		return x.Song
	}
	return nil
}

type Song struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TrackNumber int32   `protobuf:"varint,3,opt,name=trackNumber,proto3" json:"trackNumber,omitempty"`
	TrackLength int32   `protobuf:"varint,4,opt,name=trackLength,proto3" json:"trackLength,omitempty"`
	Album       *Album  `protobuf:"bytes,5,opt,name=album,proto3" json:"album,omitempty"`
	Artist      *Artist `protobuf:"bytes,6,opt,name=artist,proto3" json:"artist,omitempty"`
}

func (x *Song) Reset() {
	*x = Song{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_jukebox_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Song) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Song) ProtoMessage() {}

func (x *Song) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_jukebox_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Song.ProtoReflect.Descriptor instead.
func (*Song) Descriptor() ([]byte, []int) {
	return file_api_v1_jukebox_proto_rawDescGZIP(), []int{36}
}

func (x *Song) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Song) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Song) GetTrackNumber() int32 {
	if x != nil {
		return x.TrackNumber
	}
	return 0
}

func (x *Song) GetTrackLength() int32 {
	if x != nil {
		return x.TrackLength
	}
	return 0
}

func (x *Song) GetAlbum() *Album {
	if x != nil {
		return x.Album
	}
	return nil
}

func (x *Song) GetArtist() *Artist {
	if x != nil {
		return x.Artist
	}
	return nil
}

var File_api_v1_jukebox_proto protoreflect.FileDescriptor

var file_api_v1_jukebox_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x1a,
	0x1a, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x74,
	0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a, 0x05, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f,
	0x78, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x52,
	0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x3a, 0x0a, 0x12, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a,
	0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x05, 0x61, 0x6c,
	0x62, 0x75, 0x6d, 0x22, 0x3a, 0x0a, 0x12, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x6c, 0x62,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62,
	0x6f, 0x78, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x22,
	0xd6, 0x02, 0x0a, 0x0a, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x28,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03,
	0x13, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x9a, 0x84, 0x9e, 0x03, 0x15, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x9a, 0x84, 0x9e, 0x03,
	0x19, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x69, 0x64, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x9a, 0x84, 0x9e, 0x03, 0x1b, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x6f, 0x6e, 0x67, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x9a, 0x84, 0x9e, 0x03, 0x17, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x73, 0x6f, 0x6e, 0x67, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x06, 0x73, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x08,
	0x73, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0x9a, 0x84, 0x9e, 0x03, 0x19, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x6f, 0x6e, 0x67, 0x6e,
	0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08,
	0x73, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x09, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x79, 0x0a, 0x06, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6c, 0x62,
	0x75, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x75, 0x6b, 0x65,
	0x62, 0x6f, 0x78, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x06, 0x61, 0x6c, 0x62, 0x75, 0x6d,
	0x73, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x52,
	0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x22, 0x3e, 0x0a, 0x13, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x06,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x13, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x06,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xce, 0x02, 0x0a, 0x0b,
	0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0x9a, 0x84, 0x9e, 0x03, 0x15, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x9a, 0x84, 0x9e, 0x03, 0x18, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1e, 0x9a, 0x84, 0x9e, 0x03, 0x19, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x6f,
	0x6e, 0x67, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x9a, 0x84, 0x9e, 0x03,
	0x17, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x6f, 0x6e, 0x67, 0x69, 0x64, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x06, 0x73, 0x6f, 0x6e, 0x67, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x08, 0x73, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0x9a, 0x84, 0x9e, 0x03, 0x19, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73,
	0x6f, 0x6e, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x08, 0x73, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x0d,
	0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x28, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x9a, 0x84, 0x9e, 0x03, 0x15, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x37, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x46, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x53, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x05,
	0x73, 0x6f, 0x6e, 0x67, 0x73, 0x22, 0x73, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x6e,
	0x67, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x17, 0x0a, 0x15, 0x50, 0x6c,
	0x61, 0x79, 0x53, 0x6f, 0x6e, 0x67, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x6e, 0x67,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53,
	0x6f, 0x6e, 0x67, 0x52, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6a, 0x75, 0x6b, 0x65,
	0x62, 0x6f, 0x78, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79,
	0x53, 0x6f, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x6e, 0x67, 0x54, 0x72,
	0x61, 0x69, 0x6c, 0x65, 0x72, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x6e,
	0x67, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x40, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x22, 0xec, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x0e, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x6e, 0x67, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f,
	0x78, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x6e, 0x67, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48,
	0x00, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x6e, 0x67, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x44, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x69,
	0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x75, 0x6b, 0x65,
	0x62, 0x6f, 0x78, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x69,
	0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x22, 0xb6, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a,
	0x16, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x6e, 0x67,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79,
	0x53, 0x6f, 0x6e, 0x67, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f,
	0x78, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x6e, 0x67, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x6f, 0x6e, 0x67, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5c, 0x0a, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x69,
	0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x53, 0x6f, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x15, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x22, 0x37, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x0d,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x28, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x9a, 0x84, 0x9e, 0x03, 0x15, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x9a, 0x84, 0x9e, 0x03, 0x14, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x75, 0x72, 0x6c, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0x46, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x14,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x6f, 0x6e,
	0x67, 0x52, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x22, 0x6f, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x04, 0x73,
	0x6f, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78,
	0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x22, 0x39, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x04, 0x73,
	0x6f, 0x6e, 0x67, 0x22, 0x4c, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x22, 0x2f, 0x0a, 0x08, 0x53, 0x6f, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6a,
	0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0xdb, 0x02, 0x0a, 0x09, 0x53, 0x6f, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x9a, 0x84,
	0x9e, 0x03, 0x13, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x61, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x9a, 0x84,
	0x9e, 0x03, 0x19, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x61, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x9a, 0x84, 0x9e, 0x03, 0x18, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x9a,
	0x84, 0x9e, 0x03, 0x15, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x9a, 0x84, 0x9e, 0x03, 0x1b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3d, 0x0a, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x9a, 0x84, 0x9e, 0x03, 0x1a, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x36, 0x0a, 0x11, 0x53, 0x6f, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x6f,
	0x6e, 0x67, 0x52, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x22, 0x36, 0x0a, 0x11, 0x53, 0x6f, 0x6e, 0x67,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x04, 0x73, 0x6f, 0x6e, 0x67, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6a, 0x75,
	0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x04, 0x73, 0x6f, 0x6e, 0x67,
	0x22, 0xbd, 0x01, 0x0a, 0x04, 0x53, 0x6f, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x52, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f,
	0x78, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x2a, 0x2b, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x4a, 0x55, 0x4b, 0x45, 0x42, 0x4f, 0x58, 0x5f, 0x53, 0x31, 0x36, 0x10, 0x01, 0x32, 0xa3, 0x03,
	0x0a, 0x0c, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78,
	0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x12, 0x2e, 0x6a, 0x75,
	0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x12, 0x54, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x1b, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x22, 0x1d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x22, 0x0e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x12, 0x47, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x13, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0e, 0x2e, 0x6a, 0x75, 0x6b, 0x65,
	0x62, 0x6f, 0x78, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x62, 0x75, 0x6d,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x5f, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x22, 0x28, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x1a, 0x19, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x2f, 0x7b, 0x61, 0x6c,
	0x62, 0x75, 0x6d, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0x4a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x13, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0e, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78,
	0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x32, 0xb6, 0x03, 0x0a, 0x0d, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e,
	0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x13, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11,
	0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x58, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x6a, 0x75,
	0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x6a, 0x75, 0x6b, 0x65,
	0x62, 0x6f, 0x78, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x3a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x14, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62,
	0x6f, 0x78, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x64, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x1a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x73, 0x2f, 0x7b, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0x4d, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f,
	0x78, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e,
	0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x22, 0x1c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x2a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0xdc, 0x03, 0x0a,
	0x0f, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x50, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62,
	0x6f, 0x78, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x15, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12,
	0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x60, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x6a,
	0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6a,
	0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x6a, 0x75,
	0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x11, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6e, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0x53, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x16, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x11, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62,
	0x6f, 0x78, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x90, 0x03, 0x0a, 0x0b,
	0x53, 0x6f, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x6f,
	0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x11, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f,
	0x78, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x6e, 0x67,
	0x73, 0x12, 0x50, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x6a, 0x75,
	0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f,
	0x78, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x04,
	0x73, 0x6f, 0x6e, 0x67, 0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f,
	0x6e, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x12, 0x2e, 0x6a, 0x75, 0x6b,
	0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0d,
	0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x22, 0x1a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x6f, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x5a, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x6f,
	0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x22, 0x25,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x1a, 0x17, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x73, 0x6f, 0x6e,
	0x67, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0x47, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x12, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x0d, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x6f,
	0x6e, 0x67, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x87,
	0x06, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x6a, 0x75, 0x6b,
	0x65, 0x62, 0x6f, 0x78, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x15, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x60, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x16, 0x2e,
	0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x11, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6e, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x08, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x1a, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0x53, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x16, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x11, 0x2e, 0x6a, 0x75, 0x6b,
	0x65, 0x62, 0x6f, 0x78, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6b, 0x0a,
	0x04, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x1d, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x04, 0x73, 0x6f,
	0x6e, 0x67, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x65, 0x0a, 0x04, 0x53, 0x74,
	0x6f, 0x70, 0x12, 0x1d, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x74, 0x6f,
	0x70, 0x12, 0x55, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x74, 0x12, 0x20, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x1a, 0x1f, 0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x28, 0x01, 0x30, 0x01, 0x42, 0x99, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x2e, 0x6a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x42, 0x0c, 0x4a, 0x75, 0x6b, 0x65, 0x62, 0x6f,
	0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x6f, 0x68, 0x61, 0x6e, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x68,
	0x6f, 0x72, 0x73, 0x74, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2d, 0x62, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4a, 0x58, 0x58,
	0xaa, 0x02, 0x07, 0x4a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0xca, 0x02, 0x07, 0x4a, 0x75, 0x6b,
	0x65, 0x62, 0x6f, 0x78, 0xe2, 0x02, 0x13, 0x4a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x07, 0x4a, 0x75, 0x6b,
	0x65, 0x62, 0x6f, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_jukebox_proto_rawDescOnce sync.Once
	file_api_v1_jukebox_proto_rawDescData = file_api_v1_jukebox_proto_rawDesc
)

func file_api_v1_jukebox_proto_rawDescGZIP() []byte {
	file_api_v1_jukebox_proto_rawDescOnce.Do(func() {
		file_api_v1_jukebox_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_jukebox_proto_rawDescData)
	})
	return file_api_v1_jukebox_proto_rawDescData
}

var file_api_v1_jukebox_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v1_jukebox_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_api_v1_jukebox_proto_goTypes = []interface{}{
	(Format)(0),                     // 0: jukebox.Format
	(*Album)(nil),                   // 1: jukebox.Album
	(*AlbumCreateRequest)(nil),      // 2: jukebox.AlbumCreateRequest
	(*AlbumUpdateRequest)(nil),      // 3: jukebox.AlbumUpdateRequest
	(*AlbumQuery)(nil),              // 4: jukebox.AlbumQuery
	(*AlbumList)(nil),               // 5: jukebox.AlbumList
	(*Artist)(nil),                  // 6: jukebox.Artist
	(*ArtistCreateRequest)(nil),     // 7: jukebox.ArtistCreateRequest
	(*ArtistUpdateRequest)(nil),     // 8: jukebox.ArtistUpdateRequest
	(*ArtistList)(nil),              // 9: jukebox.ArtistList
	(*ArtistQuery)(nil),             // 10: jukebox.ArtistQuery
	(*PlaylistQuery)(nil),           // 11: jukebox.PlaylistQuery
	(*PlaylistCreateRequest)(nil),   // 12: jukebox.PlaylistCreateRequest
	(*PlaylistList)(nil),            // 13: jukebox.PlaylistList
	(*PlaylistUpdateRequest)(nil),   // 14: jukebox.PlaylistUpdateRequest
	(*Playlist)(nil),                // 15: jukebox.Playlist
	(*PlaySongChunk)(nil),           // 16: jukebox.PlaySongChunk
	(*PlaySongChunkResponse)(nil),   // 17: jukebox.PlaySongChunkResponse
	(*PlaySongHeader)(nil),          // 18: jukebox.PlaySongHeader
	(*PlaySongHeaderResponse)(nil),  // 19: jukebox.PlaySongHeaderResponse
	(*PlaySongTrailer)(nil),         // 20: jukebox.PlaySongTrailer
	(*PlaySongTrailerResponse)(nil), // 21: jukebox.PlaySongTrailerResponse
	(*Receiver)(nil),                // 22: jukebox.Receiver
	(*ReceiverCommandRequest)(nil),  // 23: jukebox.ReceiverCommandRequest
	(*ReceiverCommandResponse)(nil), // 24: jukebox.ReceiverCommandResponse
	(*ReceiverCreateRequest)(nil),   // 25: jukebox.ReceiverCreateRequest
	(*ReceiverList)(nil),            // 26: jukebox.ReceiverList
	(*ReceiverQuery)(nil),           // 27: jukebox.ReceiverQuery
	(*ReceiverUpdateRequest)(nil),   // 28: jukebox.ReceiverUpdateRequest
	(*ReceiversPlayRequest)(nil),    // 29: jukebox.ReceiversPlayRequest
	(*ReceiversPlayResponse)(nil),   // 30: jukebox.ReceiversPlayResponse
	(*ReceiversStopRequest)(nil),    // 31: jukebox.ReceiversStopRequest
	(*ReceiversStopResponse)(nil),   // 32: jukebox.ReceiversStopResponse
	(*SongList)(nil),                // 33: jukebox.SongList
	(*SongQuery)(nil),               // 34: jukebox.SongQuery
	(*SongCreateRequest)(nil),       // 35: jukebox.SongCreateRequest
	(*SongUpdateRequest)(nil),       // 36: jukebox.SongUpdateRequest
	(*Song)(nil),                    // 37: jukebox.Song
	(*timestamppb.Timestamp)(nil),   // 38: google.protobuf.Timestamp
}
var file_api_v1_jukebox_proto_depIdxs = []int32{
	6,  // 0: jukebox.Album.artist:type_name -> jukebox.Artist
	37, // 1: jukebox.Album.tracks:type_name -> jukebox.Song
	1,  // 2: jukebox.AlbumCreateRequest.album:type_name -> jukebox.Album
	1,  // 3: jukebox.AlbumUpdateRequest.album:type_name -> jukebox.Album
	1,  // 4: jukebox.AlbumList.items:type_name -> jukebox.Album
	1,  // 5: jukebox.Artist.albums:type_name -> jukebox.Album
	37, // 6: jukebox.Artist.songs:type_name -> jukebox.Song
	6,  // 7: jukebox.ArtistCreateRequest.artist:type_name -> jukebox.Artist
	6,  // 8: jukebox.ArtistUpdateRequest.artist:type_name -> jukebox.Artist
	6,  // 9: jukebox.ArtistList.items:type_name -> jukebox.Artist
	15, // 10: jukebox.PlaylistCreateRequest.playlist:type_name -> jukebox.Playlist
	15, // 11: jukebox.PlaylistList.items:type_name -> jukebox.Playlist
	15, // 12: jukebox.PlaylistUpdateRequest.playlist:type_name -> jukebox.Playlist
	37, // 13: jukebox.Playlist.songs:type_name -> jukebox.Song
	38, // 14: jukebox.PlaySongChunk.timestamp:type_name -> google.protobuf.Timestamp
	37, // 15: jukebox.PlaySongHeader.song:type_name -> jukebox.Song
	0,  // 16: jukebox.PlaySongHeader.format:type_name -> jukebox.Format
	18, // 17: jukebox.ReceiverCommandRequest.playSongHeader:type_name -> jukebox.PlaySongHeader
	16, // 18: jukebox.ReceiverCommandRequest.playSongChunk:type_name -> jukebox.PlaySongChunk
	20, // 19: jukebox.ReceiverCommandRequest.playSongTrailer:type_name -> jukebox.PlaySongTrailer
	19, // 20: jukebox.ReceiverCommandResponse.playSongHeaderResponse:type_name -> jukebox.PlaySongHeaderResponse
	17, // 21: jukebox.ReceiverCommandResponse.playSongChunkResponse:type_name -> jukebox.PlaySongChunkResponse
	21, // 22: jukebox.ReceiverCommandResponse.playSongTrailerResponse:type_name -> jukebox.PlaySongTrailerResponse
	22, // 23: jukebox.ReceiverCreateRequest.receiver:type_name -> jukebox.Receiver
	22, // 24: jukebox.ReceiverList.items:type_name -> jukebox.Receiver
	22, // 25: jukebox.ReceiverUpdateRequest.receiver:type_name -> jukebox.Receiver
	37, // 26: jukebox.ReceiversPlayRequest.song:type_name -> jukebox.Song
	37, // 27: jukebox.ReceiversPlayResponse.song:type_name -> jukebox.Song
	26, // 28: jukebox.ReceiversPlayResponse.receivers:type_name -> jukebox.ReceiverList
	37, // 29: jukebox.ReceiversStopRequest.song:type_name -> jukebox.Song
	26, // 30: jukebox.ReceiversStopResponse.receivers:type_name -> jukebox.ReceiverList
	37, // 31: jukebox.SongList.items:type_name -> jukebox.Song
	37, // 32: jukebox.SongCreateRequest.song:type_name -> jukebox.Song
	37, // 33: jukebox.SongUpdateRequest.song:type_name -> jukebox.Song
	1,  // 34: jukebox.Song.album:type_name -> jukebox.Album
	6,  // 35: jukebox.Song.artist:type_name -> jukebox.Artist
	4,  // 36: jukebox.AlbumService.List:input_type -> jukebox.AlbumQuery
	2,  // 37: jukebox.AlbumService.Create:input_type -> jukebox.AlbumCreateRequest
	4,  // 38: jukebox.AlbumService.Get:input_type -> jukebox.AlbumQuery
	3,  // 39: jukebox.AlbumService.Update:input_type -> jukebox.AlbumUpdateRequest
	4,  // 40: jukebox.AlbumService.Delete:input_type -> jukebox.AlbumQuery
	10, // 41: jukebox.ArtistService.List:input_type -> jukebox.ArtistQuery
	7,  // 42: jukebox.ArtistService.Create:input_type -> jukebox.ArtistCreateRequest
	10, // 43: jukebox.ArtistService.Get:input_type -> jukebox.ArtistQuery
	8,  // 44: jukebox.ArtistService.Update:input_type -> jukebox.ArtistUpdateRequest
	10, // 45: jukebox.ArtistService.Delete:input_type -> jukebox.ArtistQuery
	11, // 46: jukebox.PlaylistService.List:input_type -> jukebox.PlaylistQuery
	12, // 47: jukebox.PlaylistService.Create:input_type -> jukebox.PlaylistCreateRequest
	11, // 48: jukebox.PlaylistService.Get:input_type -> jukebox.PlaylistQuery
	14, // 49: jukebox.PlaylistService.Update:input_type -> jukebox.PlaylistUpdateRequest
	11, // 50: jukebox.PlaylistService.Delete:input_type -> jukebox.PlaylistQuery
	34, // 51: jukebox.SongService.List:input_type -> jukebox.SongQuery
	35, // 52: jukebox.SongService.Create:input_type -> jukebox.SongCreateRequest
	34, // 53: jukebox.SongService.Get:input_type -> jukebox.SongQuery
	36, // 54: jukebox.SongService.Update:input_type -> jukebox.SongUpdateRequest
	34, // 55: jukebox.SongService.Delete:input_type -> jukebox.SongQuery
	27, // 56: jukebox.ReceiverService.List:input_type -> jukebox.ReceiverQuery
	25, // 57: jukebox.ReceiverService.Create:input_type -> jukebox.ReceiverCreateRequest
	27, // 58: jukebox.ReceiverService.Get:input_type -> jukebox.ReceiverQuery
	28, // 59: jukebox.ReceiverService.Update:input_type -> jukebox.ReceiverUpdateRequest
	27, // 60: jukebox.ReceiverService.Delete:input_type -> jukebox.ReceiverQuery
	29, // 61: jukebox.ReceiverService.Play:input_type -> jukebox.ReceiversPlayRequest
	31, // 62: jukebox.ReceiverService.Stop:input_type -> jukebox.ReceiversStopRequest
	24, // 63: jukebox.ReceiverService.ReceiverChat:input_type -> jukebox.ReceiverCommandResponse
	5,  // 64: jukebox.AlbumService.List:output_type -> jukebox.AlbumList
	1,  // 65: jukebox.AlbumService.Create:output_type -> jukebox.Album
	1,  // 66: jukebox.AlbumService.Get:output_type -> jukebox.Album
	1,  // 67: jukebox.AlbumService.Update:output_type -> jukebox.Album
	1,  // 68: jukebox.AlbumService.Delete:output_type -> jukebox.Album
	9,  // 69: jukebox.ArtistService.List:output_type -> jukebox.ArtistList
	6,  // 70: jukebox.ArtistService.Create:output_type -> jukebox.Artist
	6,  // 71: jukebox.ArtistService.Get:output_type -> jukebox.Artist
	6,  // 72: jukebox.ArtistService.Update:output_type -> jukebox.Artist
	6,  // 73: jukebox.ArtistService.Delete:output_type -> jukebox.Artist
	13, // 74: jukebox.PlaylistService.List:output_type -> jukebox.PlaylistList
	15, // 75: jukebox.PlaylistService.Create:output_type -> jukebox.Playlist
	15, // 76: jukebox.PlaylistService.Get:output_type -> jukebox.Playlist
	15, // 77: jukebox.PlaylistService.Update:output_type -> jukebox.Playlist
	15, // 78: jukebox.PlaylistService.Delete:output_type -> jukebox.Playlist
	33, // 79: jukebox.SongService.List:output_type -> jukebox.SongList
	37, // 80: jukebox.SongService.Create:output_type -> jukebox.Song
	37, // 81: jukebox.SongService.Get:output_type -> jukebox.Song
	37, // 82: jukebox.SongService.Update:output_type -> jukebox.Song
	37, // 83: jukebox.SongService.Delete:output_type -> jukebox.Song
	26, // 84: jukebox.ReceiverService.List:output_type -> jukebox.ReceiverList
	22, // 85: jukebox.ReceiverService.Create:output_type -> jukebox.Receiver
	22, // 86: jukebox.ReceiverService.Get:output_type -> jukebox.Receiver
	22, // 87: jukebox.ReceiverService.Update:output_type -> jukebox.Receiver
	22, // 88: jukebox.ReceiverService.Delete:output_type -> jukebox.Receiver
	30, // 89: jukebox.ReceiverService.Play:output_type -> jukebox.ReceiversPlayResponse
	32, // 90: jukebox.ReceiverService.Stop:output_type -> jukebox.ReceiversStopResponse
	23, // 91: jukebox.ReceiverService.ReceiverChat:output_type -> jukebox.ReceiverCommandRequest
	64, // [64:92] is the sub-list for method output_type
	36, // [36:64] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_api_v1_jukebox_proto_init() }
func file_api_v1_jukebox_proto_init() {
	if File_api_v1_jukebox_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_jukebox_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Album); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Artist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Playlist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaySongChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaySongChunkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaySongHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaySongHeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaySongTrailer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaySongTrailerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Receiver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiverCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiverCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiverCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiverList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiverQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiverUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiversPlayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiversPlayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiversStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiversStopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SongList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SongQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SongCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SongUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_jukebox_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Song); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1_jukebox_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*ReceiverCommandRequest_PlaySongHeader)(nil),
		(*ReceiverCommandRequest_PlaySongChunk)(nil),
		(*ReceiverCommandRequest_PlaySongTrailer)(nil),
	}
	file_api_v1_jukebox_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*ReceiverCommandResponse_PlaySongHeaderResponse)(nil),
		(*ReceiverCommandResponse_PlaySongChunkResponse)(nil),
		(*ReceiverCommandResponse_PlaySongTrailerResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_jukebox_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_api_v1_jukebox_proto_goTypes,
		DependencyIndexes: file_api_v1_jukebox_proto_depIdxs,
		EnumInfos:         file_api_v1_jukebox_proto_enumTypes,
		MessageInfos:      file_api_v1_jukebox_proto_msgTypes,
	}.Build()
	File_api_v1_jukebox_proto = out.File
	file_api_v1_jukebox_proto_rawDesc = nil
	file_api_v1_jukebox_proto_goTypes = nil
	file_api_v1_jukebox_proto_depIdxs = nil
}
