// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/jukebox.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AlbumService_List_FullMethodName   = "/jukebox.AlbumService/List"
	AlbumService_Create_FullMethodName = "/jukebox.AlbumService/Create"
	AlbumService_Get_FullMethodName    = "/jukebox.AlbumService/Get"
	AlbumService_Update_FullMethodName = "/jukebox.AlbumService/Update"
	AlbumService_Delete_FullMethodName = "/jukebox.AlbumService/Delete"
)

// AlbumServiceClient is the client API for AlbumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlbumServiceClient interface {
	List(ctx context.Context, in *AlbumQuery, opts ...grpc.CallOption) (*AlbumList, error)
	Create(ctx context.Context, in *AlbumCreateRequest, opts ...grpc.CallOption) (*Album, error)
	Get(ctx context.Context, in *AlbumQuery, opts ...grpc.CallOption) (*Album, error)
	Update(ctx context.Context, in *AlbumUpdateRequest, opts ...grpc.CallOption) (*Album, error)
	Delete(ctx context.Context, in *AlbumQuery, opts ...grpc.CallOption) (*Album, error)
}

type albumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlbumServiceClient(cc grpc.ClientConnInterface) AlbumServiceClient {
	return &albumServiceClient{cc}
}

func (c *albumServiceClient) List(ctx context.Context, in *AlbumQuery, opts ...grpc.CallOption) (*AlbumList, error) {
	out := new(AlbumList)
	err := c.cc.Invoke(ctx, AlbumService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) Create(ctx context.Context, in *AlbumCreateRequest, opts ...grpc.CallOption) (*Album, error) {
	out := new(Album)
	err := c.cc.Invoke(ctx, AlbumService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) Get(ctx context.Context, in *AlbumQuery, opts ...grpc.CallOption) (*Album, error) {
	out := new(Album)
	err := c.cc.Invoke(ctx, AlbumService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) Update(ctx context.Context, in *AlbumUpdateRequest, opts ...grpc.CallOption) (*Album, error) {
	out := new(Album)
	err := c.cc.Invoke(ctx, AlbumService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) Delete(ctx context.Context, in *AlbumQuery, opts ...grpc.CallOption) (*Album, error) {
	out := new(Album)
	err := c.cc.Invoke(ctx, AlbumService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlbumServiceServer is the server API for AlbumService service.
// All implementations should embed UnimplementedAlbumServiceServer
// for forward compatibility
type AlbumServiceServer interface {
	List(context.Context, *AlbumQuery) (*AlbumList, error)
	Create(context.Context, *AlbumCreateRequest) (*Album, error)
	Get(context.Context, *AlbumQuery) (*Album, error)
	Update(context.Context, *AlbumUpdateRequest) (*Album, error)
	Delete(context.Context, *AlbumQuery) (*Album, error)
}

// UnimplementedAlbumServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAlbumServiceServer struct {
}

func (UnimplementedAlbumServiceServer) List(context.Context, *AlbumQuery) (*AlbumList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAlbumServiceServer) Create(context.Context, *AlbumCreateRequest) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAlbumServiceServer) Get(context.Context, *AlbumQuery) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAlbumServiceServer) Update(context.Context, *AlbumUpdateRequest) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAlbumServiceServer) Delete(context.Context, *AlbumQuery) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeAlbumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlbumServiceServer will
// result in compilation errors.
type UnsafeAlbumServiceServer interface {
	mustEmbedUnimplementedAlbumServiceServer()
}

func RegisterAlbumServiceServer(s grpc.ServiceRegistrar, srv AlbumServiceServer) {
	s.RegisterService(&AlbumService_ServiceDesc, srv)
}

func _AlbumService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).List(ctx, req.(*AlbumQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).Create(ctx, req.(*AlbumCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).Get(ctx, req.(*AlbumQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).Update(ctx, req.(*AlbumUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).Delete(ctx, req.(*AlbumQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// AlbumService_ServiceDesc is the grpc.ServiceDesc for AlbumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlbumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jukebox.AlbumService",
	HandlerType: (*AlbumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _AlbumService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AlbumService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AlbumService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AlbumService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AlbumService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/jukebox.proto",
}

const (
	ArtistService_List_FullMethodName   = "/jukebox.ArtistService/List"
	ArtistService_Create_FullMethodName = "/jukebox.ArtistService/Create"
	ArtistService_Get_FullMethodName    = "/jukebox.ArtistService/Get"
	ArtistService_Update_FullMethodName = "/jukebox.ArtistService/Update"
	ArtistService_Delete_FullMethodName = "/jukebox.ArtistService/Delete"
)

// ArtistServiceClient is the client API for ArtistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtistServiceClient interface {
	List(ctx context.Context, in *ArtistQuery, opts ...grpc.CallOption) (*ArtistList, error)
	Create(ctx context.Context, in *ArtistCreateRequest, opts ...grpc.CallOption) (*Artist, error)
	Get(ctx context.Context, in *ArtistQuery, opts ...grpc.CallOption) (*Artist, error)
	Update(ctx context.Context, in *ArtistUpdateRequest, opts ...grpc.CallOption) (*Artist, error)
	Delete(ctx context.Context, in *ArtistQuery, opts ...grpc.CallOption) (*Artist, error)
}

type artistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArtistServiceClient(cc grpc.ClientConnInterface) ArtistServiceClient {
	return &artistServiceClient{cc}
}

func (c *artistServiceClient) List(ctx context.Context, in *ArtistQuery, opts ...grpc.CallOption) (*ArtistList, error) {
	out := new(ArtistList)
	err := c.cc.Invoke(ctx, ArtistService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) Create(ctx context.Context, in *ArtistCreateRequest, opts ...grpc.CallOption) (*Artist, error) {
	out := new(Artist)
	err := c.cc.Invoke(ctx, ArtistService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) Get(ctx context.Context, in *ArtistQuery, opts ...grpc.CallOption) (*Artist, error) {
	out := new(Artist)
	err := c.cc.Invoke(ctx, ArtistService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) Update(ctx context.Context, in *ArtistUpdateRequest, opts ...grpc.CallOption) (*Artist, error) {
	out := new(Artist)
	err := c.cc.Invoke(ctx, ArtistService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) Delete(ctx context.Context, in *ArtistQuery, opts ...grpc.CallOption) (*Artist, error) {
	out := new(Artist)
	err := c.cc.Invoke(ctx, ArtistService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtistServiceServer is the server API for ArtistService service.
// All implementations should embed UnimplementedArtistServiceServer
// for forward compatibility
type ArtistServiceServer interface {
	List(context.Context, *ArtistQuery) (*ArtistList, error)
	Create(context.Context, *ArtistCreateRequest) (*Artist, error)
	Get(context.Context, *ArtistQuery) (*Artist, error)
	Update(context.Context, *ArtistUpdateRequest) (*Artist, error)
	Delete(context.Context, *ArtistQuery) (*Artist, error)
}

// UnimplementedArtistServiceServer should be embedded to have forward compatible implementations.
type UnimplementedArtistServiceServer struct {
}

func (UnimplementedArtistServiceServer) List(context.Context, *ArtistQuery) (*ArtistList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedArtistServiceServer) Create(context.Context, *ArtistCreateRequest) (*Artist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedArtistServiceServer) Get(context.Context, *ArtistQuery) (*Artist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedArtistServiceServer) Update(context.Context, *ArtistUpdateRequest) (*Artist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedArtistServiceServer) Delete(context.Context, *ArtistQuery) (*Artist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeArtistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtistServiceServer will
// result in compilation errors.
type UnsafeArtistServiceServer interface {
	mustEmbedUnimplementedArtistServiceServer()
}

func RegisterArtistServiceServer(s grpc.ServiceRegistrar, srv ArtistServiceServer) {
	s.RegisterService(&ArtistService_ServiceDesc, srv)
}

func _ArtistService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtistQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtistService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).List(ctx, req.(*ArtistQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtistCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtistService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).Create(ctx, req.(*ArtistCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtistQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtistService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).Get(ctx, req.(*ArtistQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtistUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtistService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).Update(ctx, req.(*ArtistUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtistQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtistService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).Delete(ctx, req.(*ArtistQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ArtistService_ServiceDesc is the grpc.ServiceDesc for ArtistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jukebox.ArtistService",
	HandlerType: (*ArtistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ArtistService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ArtistService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ArtistService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ArtistService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ArtistService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/jukebox.proto",
}

const (
	PlaylistService_List_FullMethodName   = "/jukebox.PlaylistService/List"
	PlaylistService_Create_FullMethodName = "/jukebox.PlaylistService/Create"
	PlaylistService_Get_FullMethodName    = "/jukebox.PlaylistService/Get"
	PlaylistService_Update_FullMethodName = "/jukebox.PlaylistService/Update"
	PlaylistService_Delete_FullMethodName = "/jukebox.PlaylistService/Delete"
)

// PlaylistServiceClient is the client API for PlaylistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistServiceClient interface {
	List(ctx context.Context, in *PlaylistQuery, opts ...grpc.CallOption) (*PlaylistList, error)
	Create(ctx context.Context, in *PlaylistCreateRequest, opts ...grpc.CallOption) (*Playlist, error)
	Get(ctx context.Context, in *PlaylistQuery, opts ...grpc.CallOption) (*Playlist, error)
	Update(ctx context.Context, in *PlaylistUpdateRequest, opts ...grpc.CallOption) (*Playlist, error)
	Delete(ctx context.Context, in *PlaylistQuery, opts ...grpc.CallOption) (*Playlist, error)
}

type playlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistServiceClient(cc grpc.ClientConnInterface) PlaylistServiceClient {
	return &playlistServiceClient{cc}
}

func (c *playlistServiceClient) List(ctx context.Context, in *PlaylistQuery, opts ...grpc.CallOption) (*PlaylistList, error) {
	out := new(PlaylistList)
	err := c.cc.Invoke(ctx, PlaylistService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) Create(ctx context.Context, in *PlaylistCreateRequest, opts ...grpc.CallOption) (*Playlist, error) {
	out := new(Playlist)
	err := c.cc.Invoke(ctx, PlaylistService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) Get(ctx context.Context, in *PlaylistQuery, opts ...grpc.CallOption) (*Playlist, error) {
	out := new(Playlist)
	err := c.cc.Invoke(ctx, PlaylistService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) Update(ctx context.Context, in *PlaylistUpdateRequest, opts ...grpc.CallOption) (*Playlist, error) {
	out := new(Playlist)
	err := c.cc.Invoke(ctx, PlaylistService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) Delete(ctx context.Context, in *PlaylistQuery, opts ...grpc.CallOption) (*Playlist, error) {
	out := new(Playlist)
	err := c.cc.Invoke(ctx, PlaylistService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistServiceServer is the server API for PlaylistService service.
// All implementations should embed UnimplementedPlaylistServiceServer
// for forward compatibility
type PlaylistServiceServer interface {
	List(context.Context, *PlaylistQuery) (*PlaylistList, error)
	Create(context.Context, *PlaylistCreateRequest) (*Playlist, error)
	Get(context.Context, *PlaylistQuery) (*Playlist, error)
	Update(context.Context, *PlaylistUpdateRequest) (*Playlist, error)
	Delete(context.Context, *PlaylistQuery) (*Playlist, error)
}

// UnimplementedPlaylistServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPlaylistServiceServer struct {
}

func (UnimplementedPlaylistServiceServer) List(context.Context, *PlaylistQuery) (*PlaylistList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPlaylistServiceServer) Create(context.Context, *PlaylistCreateRequest) (*Playlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPlaylistServiceServer) Get(context.Context, *PlaylistQuery) (*Playlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPlaylistServiceServer) Update(context.Context, *PlaylistUpdateRequest) (*Playlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPlaylistServiceServer) Delete(context.Context, *PlaylistQuery) (*Playlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafePlaylistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistServiceServer will
// result in compilation errors.
type UnsafePlaylistServiceServer interface {
	mustEmbedUnimplementedPlaylistServiceServer()
}

func RegisterPlaylistServiceServer(s grpc.ServiceRegistrar, srv PlaylistServiceServer) {
	s.RegisterService(&PlaylistService_ServiceDesc, srv)
}

func _PlaylistService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).List(ctx, req.(*PlaylistQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Create(ctx, req.(*PlaylistCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Get(ctx, req.(*PlaylistQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Update(ctx, req.(*PlaylistUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Delete(ctx, req.(*PlaylistQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaylistService_ServiceDesc is the grpc.ServiceDesc for PlaylistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaylistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jukebox.PlaylistService",
	HandlerType: (*PlaylistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PlaylistService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PlaylistService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PlaylistService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PlaylistService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PlaylistService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/jukebox.proto",
}

const (
	SongService_List_FullMethodName   = "/jukebox.SongService/List"
	SongService_Create_FullMethodName = "/jukebox.SongService/Create"
	SongService_Get_FullMethodName    = "/jukebox.SongService/Get"
	SongService_Update_FullMethodName = "/jukebox.SongService/Update"
	SongService_Delete_FullMethodName = "/jukebox.SongService/Delete"
)

// SongServiceClient is the client API for SongService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SongServiceClient interface {
	List(ctx context.Context, in *SongQuery, opts ...grpc.CallOption) (*SongList, error)
	Create(ctx context.Context, in *SongCreateRequest, opts ...grpc.CallOption) (*Song, error)
	Get(ctx context.Context, in *SongQuery, opts ...grpc.CallOption) (*Song, error)
	Update(ctx context.Context, in *SongUpdateRequest, opts ...grpc.CallOption) (*Song, error)
	Delete(ctx context.Context, in *SongQuery, opts ...grpc.CallOption) (*Song, error)
}

type songServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSongServiceClient(cc grpc.ClientConnInterface) SongServiceClient {
	return &songServiceClient{cc}
}

func (c *songServiceClient) List(ctx context.Context, in *SongQuery, opts ...grpc.CallOption) (*SongList, error) {
	out := new(SongList)
	err := c.cc.Invoke(ctx, SongService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) Create(ctx context.Context, in *SongCreateRequest, opts ...grpc.CallOption) (*Song, error) {
	out := new(Song)
	err := c.cc.Invoke(ctx, SongService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) Get(ctx context.Context, in *SongQuery, opts ...grpc.CallOption) (*Song, error) {
	out := new(Song)
	err := c.cc.Invoke(ctx, SongService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) Update(ctx context.Context, in *SongUpdateRequest, opts ...grpc.CallOption) (*Song, error) {
	out := new(Song)
	err := c.cc.Invoke(ctx, SongService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) Delete(ctx context.Context, in *SongQuery, opts ...grpc.CallOption) (*Song, error) {
	out := new(Song)
	err := c.cc.Invoke(ctx, SongService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SongServiceServer is the server API for SongService service.
// All implementations should embed UnimplementedSongServiceServer
// for forward compatibility
type SongServiceServer interface {
	List(context.Context, *SongQuery) (*SongList, error)
	Create(context.Context, *SongCreateRequest) (*Song, error)
	Get(context.Context, *SongQuery) (*Song, error)
	Update(context.Context, *SongUpdateRequest) (*Song, error)
	Delete(context.Context, *SongQuery) (*Song, error)
}

// UnimplementedSongServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSongServiceServer struct {
}

func (UnimplementedSongServiceServer) List(context.Context, *SongQuery) (*SongList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSongServiceServer) Create(context.Context, *SongCreateRequest) (*Song, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSongServiceServer) Get(context.Context, *SongQuery) (*Song, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSongServiceServer) Update(context.Context, *SongUpdateRequest) (*Song, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSongServiceServer) Delete(context.Context, *SongQuery) (*Song, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeSongServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SongServiceServer will
// result in compilation errors.
type UnsafeSongServiceServer interface {
	mustEmbedUnimplementedSongServiceServer()
}

func RegisterSongServiceServer(s grpc.ServiceRegistrar, srv SongServiceServer) {
	s.RegisterService(&SongService_ServiceDesc, srv)
}

func _SongService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).List(ctx, req.(*SongQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).Create(ctx, req.(*SongCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).Get(ctx, req.(*SongQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).Update(ctx, req.(*SongUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).Delete(ctx, req.(*SongQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// SongService_ServiceDesc is the grpc.ServiceDesc for SongService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SongService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jukebox.SongService",
	HandlerType: (*SongServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _SongService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SongService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SongService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SongService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SongService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/jukebox.proto",
}

const (
	ReceiverService_List_FullMethodName         = "/jukebox.ReceiverService/List"
	ReceiverService_Create_FullMethodName       = "/jukebox.ReceiverService/Create"
	ReceiverService_Get_FullMethodName          = "/jukebox.ReceiverService/Get"
	ReceiverService_Update_FullMethodName       = "/jukebox.ReceiverService/Update"
	ReceiverService_Delete_FullMethodName       = "/jukebox.ReceiverService/Delete"
	ReceiverService_Play_FullMethodName         = "/jukebox.ReceiverService/Play"
	ReceiverService_Stop_FullMethodName         = "/jukebox.ReceiverService/Stop"
	ReceiverService_ReceiverChat_FullMethodName = "/jukebox.ReceiverService/ReceiverChat"
)

// ReceiverServiceClient is the client API for ReceiverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceiverServiceClient interface {
	List(ctx context.Context, in *ReceiverQuery, opts ...grpc.CallOption) (*ReceiverList, error)
	Create(ctx context.Context, in *ReceiverCreateRequest, opts ...grpc.CallOption) (*Receiver, error)
	Get(ctx context.Context, in *ReceiverQuery, opts ...grpc.CallOption) (*Receiver, error)
	Update(ctx context.Context, in *ReceiverUpdateRequest, opts ...grpc.CallOption) (*Receiver, error)
	Delete(ctx context.Context, in *ReceiverQuery, opts ...grpc.CallOption) (*Receiver, error)
	Play(ctx context.Context, in *ReceiversPlayRequest, opts ...grpc.CallOption) (*ReceiversPlayResponse, error)
	Stop(ctx context.Context, in *ReceiversStopRequest, opts ...grpc.CallOption) (*ReceiversStopResponse, error)
	ReceiverChat(ctx context.Context, opts ...grpc.CallOption) (ReceiverService_ReceiverChatClient, error)
}

type receiverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiverServiceClient(cc grpc.ClientConnInterface) ReceiverServiceClient {
	return &receiverServiceClient{cc}
}

func (c *receiverServiceClient) List(ctx context.Context, in *ReceiverQuery, opts ...grpc.CallOption) (*ReceiverList, error) {
	out := new(ReceiverList)
	err := c.cc.Invoke(ctx, ReceiverService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverServiceClient) Create(ctx context.Context, in *ReceiverCreateRequest, opts ...grpc.CallOption) (*Receiver, error) {
	out := new(Receiver)
	err := c.cc.Invoke(ctx, ReceiverService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverServiceClient) Get(ctx context.Context, in *ReceiverQuery, opts ...grpc.CallOption) (*Receiver, error) {
	out := new(Receiver)
	err := c.cc.Invoke(ctx, ReceiverService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverServiceClient) Update(ctx context.Context, in *ReceiverUpdateRequest, opts ...grpc.CallOption) (*Receiver, error) {
	out := new(Receiver)
	err := c.cc.Invoke(ctx, ReceiverService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverServiceClient) Delete(ctx context.Context, in *ReceiverQuery, opts ...grpc.CallOption) (*Receiver, error) {
	out := new(Receiver)
	err := c.cc.Invoke(ctx, ReceiverService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverServiceClient) Play(ctx context.Context, in *ReceiversPlayRequest, opts ...grpc.CallOption) (*ReceiversPlayResponse, error) {
	out := new(ReceiversPlayResponse)
	err := c.cc.Invoke(ctx, ReceiverService_Play_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverServiceClient) Stop(ctx context.Context, in *ReceiversStopRequest, opts ...grpc.CallOption) (*ReceiversStopResponse, error) {
	out := new(ReceiversStopResponse)
	err := c.cc.Invoke(ctx, ReceiverService_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverServiceClient) ReceiverChat(ctx context.Context, opts ...grpc.CallOption) (ReceiverService_ReceiverChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReceiverService_ServiceDesc.Streams[0], ReceiverService_ReceiverChat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &receiverServiceReceiverChatClient{stream}
	return x, nil
}

type ReceiverService_ReceiverChatClient interface {
	Send(*ReceiverCommandResponse) error
	Recv() (*ReceiverCommandRequest, error)
	grpc.ClientStream
}

type receiverServiceReceiverChatClient struct {
	grpc.ClientStream
}

func (x *receiverServiceReceiverChatClient) Send(m *ReceiverCommandResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *receiverServiceReceiverChatClient) Recv() (*ReceiverCommandRequest, error) {
	m := new(ReceiverCommandRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReceiverServiceServer is the server API for ReceiverService service.
// All implementations should embed UnimplementedReceiverServiceServer
// for forward compatibility
type ReceiverServiceServer interface {
	List(context.Context, *ReceiverQuery) (*ReceiverList, error)
	Create(context.Context, *ReceiverCreateRequest) (*Receiver, error)
	Get(context.Context, *ReceiverQuery) (*Receiver, error)
	Update(context.Context, *ReceiverUpdateRequest) (*Receiver, error)
	Delete(context.Context, *ReceiverQuery) (*Receiver, error)
	Play(context.Context, *ReceiversPlayRequest) (*ReceiversPlayResponse, error)
	Stop(context.Context, *ReceiversStopRequest) (*ReceiversStopResponse, error)
	ReceiverChat(ReceiverService_ReceiverChatServer) error
}

// UnimplementedReceiverServiceServer should be embedded to have forward compatible implementations.
type UnimplementedReceiverServiceServer struct {
}

func (UnimplementedReceiverServiceServer) List(context.Context, *ReceiverQuery) (*ReceiverList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedReceiverServiceServer) Create(context.Context, *ReceiverCreateRequest) (*Receiver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedReceiverServiceServer) Get(context.Context, *ReceiverQuery) (*Receiver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedReceiverServiceServer) Update(context.Context, *ReceiverUpdateRequest) (*Receiver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedReceiverServiceServer) Delete(context.Context, *ReceiverQuery) (*Receiver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedReceiverServiceServer) Play(context.Context, *ReceiversPlayRequest) (*ReceiversPlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (UnimplementedReceiverServiceServer) Stop(context.Context, *ReceiversStopRequest) (*ReceiversStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedReceiverServiceServer) ReceiverChat(ReceiverService_ReceiverChatServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiverChat not implemented")
}

// UnsafeReceiverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiverServiceServer will
// result in compilation errors.
type UnsafeReceiverServiceServer interface {
	mustEmbedUnimplementedReceiverServiceServer()
}

func RegisterReceiverServiceServer(s grpc.ServiceRegistrar, srv ReceiverServiceServer) {
	s.RegisterService(&ReceiverService_ServiceDesc, srv)
}

func _ReceiverService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiverQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServiceServer).List(ctx, req.(*ReceiverQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiverCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServiceServer).Create(ctx, req.(*ReceiverCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiverQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServiceServer).Get(ctx, req.(*ReceiverQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiverUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServiceServer).Update(ctx, req.(*ReceiverUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiverQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServiceServer).Delete(ctx, req.(*ReceiverQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverService_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiversPlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServiceServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverService_Play_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServiceServer).Play(ctx, req.(*ReceiversPlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiversStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServiceServer).Stop(ctx, req.(*ReceiversStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverService_ReceiverChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReceiverServiceServer).ReceiverChat(&receiverServiceReceiverChatServer{stream})
}

type ReceiverService_ReceiverChatServer interface {
	Send(*ReceiverCommandRequest) error
	Recv() (*ReceiverCommandResponse, error)
	grpc.ServerStream
}

type receiverServiceReceiverChatServer struct {
	grpc.ServerStream
}

func (x *receiverServiceReceiverChatServer) Send(m *ReceiverCommandRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *receiverServiceReceiverChatServer) Recv() (*ReceiverCommandResponse, error) {
	m := new(ReceiverCommandResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReceiverService_ServiceDesc is the grpc.ServiceDesc for ReceiverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceiverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jukebox.ReceiverService",
	HandlerType: (*ReceiverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ReceiverService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ReceiverService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ReceiverService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ReceiverService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ReceiverService_Delete_Handler,
		},
		{
			MethodName: "Play",
			Handler:    _ReceiverService_Play_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ReceiverService_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiverChat",
			Handler:       _ReceiverService_ReceiverChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/jukebox.proto",
}
